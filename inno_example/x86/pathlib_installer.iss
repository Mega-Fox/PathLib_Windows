; MIT License
; 
; Copyright (c) 2020 by MegaFox
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
; 
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define AppName "PathLib"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{26485931-CA40-4672-A252-D97D22F7A732}
AppName={#AppName}
AppVersion=0.1
VersionInfoVersion=0.1.0.0
VersionInfoCopyright=© 2020 - MegaFox
AppVerName=PathLib 0.1
AppPublisher=MegaFox
AppPublisherURL=http://4pda.ru/forum/index.php?showuser=4964705
AppSupportURL=http://4pda.ru/forum/index.php?showuser=4964705
AppUpdatesURL=http://4pda.ru/forum/index.php?showuser=4964705
VersionInfoDescription=PATH registration library
UsePreviousAppDir=no
DefaultDirName={sd}\MegaFox\PathLibDemo
DisableDirPage=no
ChangesEnvironment=yes
DefaultGroupName=PathLib
DisableProgramGroupPage=no
OutputDir=.
OutputBaseFilename=pathlib_demo
Compression=lzma
SolidCompression=no
Encryption=no
Uninstallable=yes
ShowLanguageDialog=no 

[Languages]
Name: "english"; MessagesFile: "Languages\Default.isl"; InfoBeforeFile: "Languages\info before.txt"; LicenseFile: "Languages\LICENSE.txt"
Name: "russian"; MessagesFile: "Languages\Russian.isl"; InfoBeforeFile: "Languages\info before ru.txt"; LicenseFile: "Languages\LICENSE.txt"

[CustomMessages]
english.addpw=Add to PATH variable
russian.addpw=Добавить в переменную PATH
english.rempw=Remove from PATH variable
russian.rempw=Удалить из переменной PATH
english.uninsbutton=Uninstall
russian.uninsbutton=Удалить
english.uninstitle=Ready to Uninstall
russian.uninstitle=Всё готово к удалению
english.uninsmessage=Select components to uninstall
russian.uninsmessage=Выберите компоненты для удаления
english.uninstasks=Select the additional tasks you would like Setup to perform while uninstalling AppName, then click Next.
russian.uninstasks=Выберите дополнительные задачи, которые должны выполниться при удалении AppName, после этого нажмите «Далее».
english.uninslabel=Select Additional Tasks
russian.uninslabel=Выберите дополнительные задачи
english.uninsdesc=Which additional tasks should be performed?
russian.uninsdesc=Какие дополнительные задачи необходимо выполнить?
english.uninsmess=Click Uninstall to continue with the uninstallation, or click Back if you want to review or change any settings.
russian.uninsmess=Нажмите «Удалить», чтобы продолжить, или «Назад», если вы хотите просмотреть или изменить опции установки.
english.confi=Uninstaller is now ready to begin uninstalling AppName from your computer.
russian.confi=Программа удаления готова начать удаление AppName с вашего компьютера.
english.task1=Remove PathLib program files
russian.task1=Удалить программные файлы PathLib
english.task2=Remove from PATH
russian.task2=Удалить из PATH
english.uninstart=Uninstall
russian.uninstart=Удалить

[Icons]
Name: "{group}\{cm:uninstart} {#AppName}"; Filename: "{uninstallexe}"

[Tasks]
Name: envPath; Description: "{cm:addpw}"

[Files]
Source: "pathlib32.dll"; DestDir: "{app}"; Flags: ignoreversion unsetntfscompression uninsremovereadonly solidbreak overwritereadonly noregerror allowunsafefiles
Source: "register32.exe"; DestDir: "{app}"; Flags: ignoreversion unsetntfscompression uninsremovereadonly solidbreak overwritereadonly noregerror allowunsafefiles
Source: "unregister32.exe"; DestDir: "{app}"; Flags: ignoreversion unsetntfscompression uninsremovereadonly solidbreak overwritereadonly noregerror allowunsafefiles

//Source: "pathlib32.dll"; Flags: dontcopy
; use flag dontcopy if you not want to remove from PATH
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Code]
var 
  CheckBox1: TNewCheckBox;
  CheckBox2: TNewCheckBox;

procedure InitializeWizard();
begin
  WizardForm.CancelButton.Width := WizardForm.CancelButton.Width - 5;
  WizardForm.CancelButton.Left := WizardForm.CancelButton.Left + 3;
  WizardForm.NextButton.Width := WizardForm.NextButton.Width - 5;
  WizardForm.NextButton.Left := WizardForm.NextButton.Left + 8;
  WizardForm.BackButton.Width := WizardForm.BackButton.Width - 5;
  WizardForm.BackButton.Left := WizardForm.BackButton.Left + 3;
  WizardForm.ReadyMemo.Width := 0;
  WizardForm.ReadyMemo.Height := 0;
end;

function pathLibRegisterSystemComp(curdir: String): Integer;
external 'pathLibRegisterSystemComp@files:pathlib32.dll cdecl delayload';
//external 'pathLibRegisterSystemComp@files:pathlib32.dll,libgcc_s_dw2-1.dll,libstdc++-6.dll,libwinpthread-1.dll cdecl loadwithalteredsearchpath delayload';    - dynamical MinGW linking

function pathLibUnregisterSystemComp(curdir: String): Integer;
external 'pathLibUnregisterSystemComp@{app}\pathlib32.dll cdecl delayload uninstallonly';

function pathLibUnregisterUserComp(curdir: String): Integer;
external 'pathLibUnregisterUserComp@{app}\pathlib32.dll cdecl delayload uninstallonly';
 
procedure CurPageChanged(CurPageID: Integer);
begin
  if CurPageID = wpSelectTasks
  then begin
    WizardForm.TasksList.ItemEnabled[0] := False;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep = ssPostInstall) and IsTaskSelected('envPath')
  then pathLibRegisterSystemComp(WizardDirValue);
  //then pathLibRegisterSystemComp(WizardDirValue + '\Application');
  //then pathLibRegisterSystemComp(ExpandConstant('{sd}') + '\MegaFox\PathLibDemo');
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if (CurUninstallStep = usUninstall)
  then begin
    if CheckBox2.Checked then
    begin
      pathLibUnregisterSystemComp(ExpandConstant('{app}'));
      pathLibUnregisterUserComp(ExpandConstant('{app}'));
      UnloadDLL(ExpandConstant('{app}\pathlib32.dll'));
    end
  end;
end;

//If you want to make unregistration of folder in an uninstaller generated automatically, you need to unpack pathlib32.dll to a folder that contains unins000.exe (this folder is {app})
//Если вы хотите отменить регистрацию папки в автоматически созданной программе удаления, вам необходимо распаковать pathlib32.dll в папку, содержащую unins000.exe (эта папка - {app})

var
  UninstallFirstPage: TNewNotebookPage;
  UninstallSecondPage: TNewNotebookPage;
  UninstallBackButton: TNewButton;
  UninstallNextButton: TNewButton;
  NNAA: string;
  NNTT: string;

procedure UpdateUninstallWizard;
begin
  if UninstallProgressForm.InnerNotebook.ActivePage = UninstallFirstPage then
  begin
    UninstallProgressForm.PageNameLabel.Caption := ExpandConstant('{cm:uninslabel}');
    UninstallProgressForm.PageDescriptionLabel.Caption := ExpandConstant('{cm:uninsdesc}');
  end
    else
  if UninstallProgressForm.InnerNotebook.ActivePage = UninstallSecondPage then
  begin
    UninstallProgressForm.PageNameLabel.Caption := ExpandConstant('{cm:uninstitle}');
    NNTT := ExpandConstant('{cm:confi}');
    NNAA := '{#AppName}'
    StringChangeEx(NNTT, 'AppName', NNAA, True);
    UninstallProgressForm.PageDescriptionLabel.Caption := NNTT;
  end;

  UninstallBackButton.Visible :=
    (UninstallProgressForm.InnerNotebook.ActivePage <> UninstallFirstPage);

  if UninstallProgressForm.InnerNotebook.ActivePage <> UninstallSecondPage then
  begin
    UninstallNextButton.Caption := SetupMessage(msgButtonNext);
    UninstallNextButton.ModalResult := mrNone;
  end
    else
  begin
    UninstallNextButton.Caption := ExpandConstant('{cm:uninsbutton}');
    { Make the "Uninstall" button break the ShowModal loop }
    UninstallNextButton.ModalResult := mrOK;
  end;
end;  

procedure UninstallNextButtonClick(Sender: TObject);
begin
  if UninstallProgressForm.InnerNotebook.ActivePage = UninstallSecondPage then
  begin
    UninstallNextButton.Visible := False;
    UninstallBackButton.Visible := False;
  end
    else
  begin
    if UninstallProgressForm.InnerNotebook.ActivePage = UninstallFirstPage then
    begin
      UninstallProgressForm.InnerNotebook.ActivePage := UninstallSecondPage;
    end;
    UpdateUninstallWizard;
  end;
end;

procedure UninstallBackButtonClick(Sender: TObject);
begin
  if UninstallProgressForm.InnerNotebook.ActivePage = UninstallSecondPage then
  begin
    UninstallProgressForm.InnerNotebook.ActivePage := UninstallFirstPage;
  end;
  UpdateUninstallWizard;
end;

procedure InitializeUninstallProgressForm();
var
  PageText: TNewStaticText;
  NNAA: string;
  NNTT: string;
  PageNameLabel: string;
  PageDescriptionLabel: string;
  CancelButtonEnabled: Boolean;
  CancelButtonModalResult: Integer;
begin
  if not UninstallSilent then
  begin
    { Create the first page and make it active }
    UninstallFirstPage := TNewNotebookPage.Create(UninstallProgressForm);
    UninstallFirstPage.Notebook := UninstallProgressForm.InnerNotebook;
    UninstallFirstPage.Parent := UninstallProgressForm.InnerNotebook;
    UninstallFirstPage.Align := alClient;

    PageText := TNewStaticText.Create(UninstallProgressForm);
    PageText.Parent := UninstallFirstPage;
    PageText.Top := UninstallProgressForm.StatusLabel.Top - 4;
    PageText.Left := UninstallProgressForm.StatusLabel.Left;
    PageText.WordWrap := True;
    PageText.AutoSize := True;
    PageText.ShowAccelChar := True;
    PageText.Width := UninstallProgressForm.StatusLabel.Width;
    PageText.Height := UninstallProgressForm.StatusLabel.Height;
    NNTT := ExpandConstant('{cm:uninstasks}');
    NNAA := '{#AppName}'
    StringChangeEx(NNTT, 'AppName', NNAA, True);
    PageText.Caption := NNTT;
   
    CheckBox1 := TNewCheckBox.Create(UninstallProgressForm);
    CheckBox1.Parent := UninstallFirstPage;
    CheckBox1.Left := UninstallProgressForm.StatusLabel.Left + 4;
    CheckBox1.Top := PageText.Top + PageText.Height + 12;
    CheckBox1.Width := UninstallProgressForm.StatusLabel.Width;

    CheckBox1.Caption := ExpandConstant('{cm:task1}');
    CheckBox1.Checked := True;
    CheckBox1.Enabled := False;
     
    CheckBox2 := TNewCheckBox.Create(UninstallProgressForm);
    CheckBox2.Parent := UninstallFirstPage;
    CheckBox2.Left := UninstallProgressForm.StatusLabel.Left + 4;
    CheckBox2.Top := CheckBox1.Top + CheckBox1.Height + 5;
    CheckBox2.Width := UninstallProgressForm.StatusLabel.Width;

    CheckBox2.Caption := ExpandConstant('{cm:task2}');
    CheckBox2.Checked := False;
    CheckBox2.Enabled := False;

    if FileExists(ExpandConstant('{app}\pathlib32.dll')) then
    begin
      CheckBox2.Checked := True;
      CheckBox2.Enabled := True;
    end;

    UninstallProgressForm.InnerNotebook.ActivePage := UninstallFirstPage;

    PageNameLabel := UninstallProgressForm.PageNameLabel.Caption;
    PageDescriptionLabel := UninstallProgressForm.PageDescriptionLabel.Caption;

    { Create the second page }

    UninstallSecondPage := TNewNotebookPage.Create(UninstallProgressForm);
    UninstallSecondPage.Notebook := UninstallProgressForm.InnerNotebook;
    UninstallSecondPage.Parent := UninstallProgressForm.InnerNotebook;
    UninstallSecondPage.Align := alClient;

    PageText := TNewStaticText.Create(UninstallProgressForm);
    PageText.Parent := UninstallSecondPage;
    PageText.Top := UninstallProgressForm.StatusLabel.Top - 4;
    PageText.Left := UninstallProgressForm.StatusLabel.Left;
    PageText.WordWrap := True;
    PageText.AutoSize := True;
    PageText.ShowAccelChar := True;
    PageText.Width := UninstallProgressForm.StatusLabel.Width;
    PageText.Height := UninstallProgressForm.StatusLabel.Height;
    PageText.Caption := ExpandConstant('{cm:uninsmess}');

    //UninstallProgressForm.InnerNotebook.ActivePage := UninstallSecondPage;

    UninstallNextButton := TNewButton.Create(UninstallProgressForm);
    UninstallNextButton.Parent := UninstallProgressForm;
    UninstallNextButton.Left :=
      UninstallProgressForm.CancelButton.Left -
      UninstallProgressForm.CancelButton.Width -
      ScaleX(10);
    UninstallNextButton.Top := UninstallProgressForm.CancelButton.Top;
    UninstallNextButton.Width := UninstallProgressForm.CancelButton.Width;
    UninstallNextButton.Height := UninstallProgressForm.CancelButton.Height;
    UninstallNextButton.OnClick := @UninstallNextButtonClick;

    UninstallBackButton := TNewButton.Create(UninstallProgressForm);
    UninstallBackButton.Parent := UninstallProgressForm;
    UninstallBackButton.Left :=
      UninstallNextButton.Left - UninstallNextButton.Width -
      ScaleX(10);
    UninstallBackButton.Top := UninstallProgressForm.CancelButton.Top;
    UninstallBackButton.Width := UninstallProgressForm.CancelButton.Width;
    UninstallBackButton.Height := UninstallProgressForm.CancelButton.Height;
    UninstallBackButton.Caption := SetupMessage(msgButtonBack);
    UninstallBackButton.OnClick := @UninstallBackButtonClick;
    UninstallBackButton.TabOrder := UninstallProgressForm.CancelButton.TabOrder;

    UninstallNextButton.TabOrder := UninstallBackButton.TabOrder + 1;

    UninstallProgressForm.CancelButton.TabOrder := UninstallNextButton.TabOrder + 1;

    { Run our wizard pages } 
    UpdateUninstallWizard;
    CancelButtonEnabled := UninstallProgressForm.CancelButton.Enabled
    UninstallProgressForm.CancelButton.Enabled := True;
    CancelButtonModalResult := UninstallProgressForm.CancelButton.ModalResult;
    UninstallProgressForm.CancelButton.ModalResult := mrCancel;

    if UninstallProgressForm.ShowModal = mrCancel then Abort;

    { Restore the standard page payout }
    UninstallProgressForm.CancelButton.Enabled := CancelButtonEnabled;
    UninstallProgressForm.CancelButton.ModalResult := CancelButtonModalResult;

    UninstallProgressForm.PageNameLabel.Caption := PageNameLabel;
    UninstallProgressForm.PageDescriptionLabel.Caption := PageDescriptionLabel;

    UninstallProgressForm.InnerNotebook.ActivePage :=
      UninstallProgressForm.InstallingPage;
  end;
end;

//function InitializeUninstall : Boolean;
//begin
//  if CheckBox2.Checked then
//  begin
//    pathLibUnregisterSystemComp(WizardDirValue);
//    pathLibUnregisterUserComp(WizardDirValue);
//  end
//end;
